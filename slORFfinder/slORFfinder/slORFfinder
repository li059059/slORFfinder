#!/usr/bin/python3
import sys, os, getopt, time


def main():
    usage = """
    slORFfinder version 1.0 by Bo Song

    Usage:
        slORFfinder [options]* --genome <reference> --gtf <annotation> --SL <spliced-leader sequence> --rna <alignment of RNA-Seq reads> --ribo <alignment of Ribo-Seq reads>

        <reference>                             Sequence of reference genome (fasta)
        <annotation>                            Annotation of reference genome (gtf)
        <spliced-leader sequence>               Spliced-leader sequence in captical letters (string) (Multiple SLs separated by comma; Ambiguous nucleotide is not allowed)
        <alignment of RNA-Seq reads>            Alignment of RNA-Seq reads (bam)
        <alignment of Ribo-Seq reads>           Alignment of RPFs (bam)

    Options:

        --start         Start codons (spearate by comma) [default: AUG]
        --pcov          Minimum RPF coverage of Psites (0-1) [default: 0]
        --nCores        Number of multiprocessors [default: 5]
        --transOnly     Output all predicted ORFs (0) or only slORF (1) [default: 1]
        --outdir        Output directory [default: ./slORF]
        --prefix        Prefix of output files [default: ribosl]
        --Rscript       Path to Rscript
        --bedtools      Path to bedtools
        --samtools      Path to samtools
        --slseed        The number of soft clipped reads [default: 8]
        --filetype      bam/sam file type [default: bam]
 
"""
    startCodon, outdir, prefix = 'AUG,UUG,CUG,GUG', 'slORF', 'ribosl'
    pathR = ""
    pathBedtools = ""
    pathSamtools = ""
    nCores = 5
    pcov = 0.00000000001
    transOnly = 1
    softclip = 8
    filetype = 'bam'
    #sl = 'GGTTTAATTACCCAAGTTTGAG'  # NEMATODA
    try:
        opts, args = getopt.getopt(sys.argv[1:], "h",
                                   ["help", "genome=", "gtf=", "SL=", "rna=", "ribo=", "pcov=", "nCores=", "transOnly=", "start=", "outdir=",
                                    "prefix=", "Rscript=", "bedtools=", "samtools=", "slseed=","filetype="])
    except:
        sys.stdout.write(usage)
        sys.exit()

    if len(sys.argv[1:]) < 3:
        sys.stdout.write(usage)
        sys.exit()

    for opt, arg in opts:
        if opt in ('-h', '-help'):
            sys.stdout.write(usage)
            sys.exit()
        elif opt in ('--genome'):
            if arg is None:
                sys.stdout.write(usage)
                sys.exit()
            else:
                sys.stdout.write("Genome is: " + arg + '\n')
                genome = arg
        elif opt in ('--gtf'):
            gtf = arg
            sys.stdout.write("GTF is: " + gtf + '\n')
        elif opt in ('--SL'):
            sl = arg
            if 'U' in sl: sl = sl.replace('U', 'T')
            sys.stdout.write("The spliced-leader sequence is: " + sl + '\n')
        elif opt in ('--rna'):
            bamRNA = arg
            sys.stdout.write("RNA alignment input is: " + bamRNA + '\n')
        elif opt in ('--ribo'):
            bamRibo = arg
            sys.stdout.write("RPF alignment input is: " + bamRibo + '\n')
        elif opt in ('--startCodon'):
            startCodon = arg
            sys.stdout.write("Start codons are: " + startCodon + '\n')
        elif opt in ('--outdir'):
            outdir = arg
            sys.stdout.write("Output directory is: " + outdir + '\n')
        elif opt in ('--prefix'):
            prefix = arg
        elif opt in ('--pcov'):
            pcov = float(arg)
        elif opt in ('--nCores'):
            nCores = int(arg)
        elif opt in ('--transOnly'):
            transOnly = int(arg)
        elif opt in ('--Rscript'):
            pathR = arg
        elif opt in ('--bedtools'):
            pathBedtools = arg
        elif opt in ('--samtools'):
            pathSamtools = arg
        elif opt in ('--slseed'):
            softclip = arg
        elif opt in ('--filetype'):
            filetype = arg

    softclip = int(softclip)
    genome = os.path.abspath(genome)
    gtf = os.path.abspath(gtf)
    bamRNA = os.path.abspath(bamRNA)
    bamRibo = os.path.abspath(bamRibo)
    timetick = str(time.time()).split(".")[0]
    logout = "log" + str(timetick)

    Bin = sys.path[0]
    sys.path.append(Bin + '/bin')
    import ribosl

    sys.stdout.write("slORFfinder starts ..." + '\n')
    if not os.path.exists(outdir): os.makedirs(outdir)
    os.chdir(outdir)

    entropy = 1
    if not os.path.exists(prefix): ribosl.StartExtract(gtf, prefix)
    if not os.path.exists(prefix + '_OffSet.txt'): ribosl.OffSetExtract(bamRibo, prefix + '.start.bed', prefix, logout,
                                                                        pathBedtools=pathBedtools,
                                                                        pathSamtools=pathSamtools)

    sys.stdout.write("\tEvaluating RPFs qualities" + '\n')
    if os.path.exists(prefix + '.R.txt'):
        if not os.path.exists('Plot'): os.makedirs('Plot')
        if not pathR:
            try:
                os.system('Rscript ' + Bin + '/bin/multitaper.R ' + prefix + '.R.txt 1>>' + logout)
                os.system('Rscript ' + Bin + '/bin/metaplotHP.R ' + prefix + '.L.txt ' + prefix + '.R.txt 1>>' + logout)
            except:
                sys.stdout.write(
                    "ERROR: Rscript is not a excutable command, please provide the path to Rscript using --Rscript option")
                sys.exit()
        else:
            os.system(pathR + '/Rscript ' + Bin + '/bin/multitaper.R ' + prefix + '.R.txt 1>>' + logout)
            os.system(
                pathR + '/Rscript ' + Bin + '/bin/metaplotHP.R ' + prefix + '.L.txt ' + prefix + '.R.txt 2>>' + logout)

    sys.stdout.write("\tExtracting genome-wide codon usages" + '\n')
    if not os.path.exists(prefix + '_codonUsage.pickle'): ribosl.UsageExtract(genome, gtf, nCores, prefix)
    if not os.path.exists(prefix + '_dep.pickle'): entropy = ribosl.PsiteAllocate(prefix + '.bed',
                                                                                  prefix + '_OffSet.txt',
                                                                                  prefix + '_multitaper.Freq.txt',
                                                                                  prefix)

    sys.stdout.write("\tDetecting splicing sites" + '\n')
    SLTrans = ribosl.read_bam(bamRNA, sl, softclip, filetype)
    sys.stdout.write("\tPredicting ORFs" + '\n')
    if not os.path.exists(prefix + '_orf.fa'): ribosl.OrfFinder(entropy, startCodon, genome, gtf, pcov, nCores, SLTrans,
                                                                transOnly, prefix)

    sys.stdout.write("\tORF prediction completed. Outputting ..." + '\n')
    if not os.path.exists(prefix + '_sORF.gff'):
        ribosl.gffMaker(gtf, prefix + '.start.bed', prefix + '.stop.bed', prefix + '_orf.fa', prefix + '_sORF.gff',
                        prefix + '_orf_aa.fa', prefix + '_orf_table.txt', prefix + '_summary.txt')

    os.system('rm *.bed *.pickle *.R.txt *.L.txt ' + prefix)
    sys.stdout.write("slORFfinder completed" + '\n')


if __name__ == "__main__":
    main()
